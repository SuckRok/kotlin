package

internal val strList: kotlin.List<kotlin.String>
internal val strMap: kotlin.Map<kotlin.String, kotlin.String>
internal fun main(): kotlin.Unit

public/*package*/ open class A</*0*/ T : kotlin.Any!> {
    public/*package*/ constructor A</*0*/ T : kotlin.Any!>()
    public/*package*/ final var x: kotlin.(Mutable)List<T!>!
    public/*package*/ open fun bar(): A<kotlin.(Mutable)List<T!>!>!
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public/*package*/ open fun foo(/*0*/ x: T!, /*1*/ y: kotlin.(Mutable)List<T!>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public/*package*/ open class Test {
    public/*package*/ constructor Test()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public/*package*/ open class RawADerived : A<kotlin.Any!> {
        public/*package*/ constructor RawADerived()
        public/*package*/ final override /*1*/ /*fake_override*/ var x: kotlin.(Mutable)List<(erased) kotlin.Any?>!
        public/*package*/ open override /*1*/ /*fake_override*/ fun bar(): A<(erased) kotlin.Any!>!
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: [Raw]kotlin.Any?): [Raw]kotlin.Boolean
        public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ x: [Raw]kotlin.Any!, /*1*/ y: kotlin.(Mutable)List<(erased) kotlin.Any?>!): [Raw]kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): [Raw]kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): [Raw]kotlin.String
    }
}
